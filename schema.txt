CREATE TABLE [constituency_boundaries] (
   [id] INTEGER PRIMARY KEY,
   [OBJECTID_1] INTEGER,
   [GUID] TEXT,
   [CON_SEAT_] TEXT,
   [CON_ID] TEXT,
   [InPoly_FID] INTEGER,
   [SimPgnFlag] INTEGER,
   [MaxSimpTol] INTEGER,
   [MinSimpTol] INTEGER,
   [geometry] TEXT
);
CREATE TABLE "constituencies" (
   [constituency] TEXT PRIMARY KEY,
   [seat_count] INTEGER,
   [returning_officer_url] TEXT
);
CREATE TABLE [candidates] (
   [constituency] TEXT,
   [party] TEXT,
   [wikipedia] TEXT,
   [name] TEXT,
   [incumbent] TEXT,
   [previous_member_of_dail_or_seanad] INTEGER
);
CREATE VIEW parties_uncontested_constituencies AS WITH
  possible_candidacies AS (
    SELECT
      parties.party AS party,
      constituencies.constituency AS constituency
    FROM
      constituencies
      JOIN parties
  )
SELECT
  possible_candidacies.party, possible_candidacies.constituency
FROM
  candidates
  RIGHT OUTER JOIN possible_candidacies ON candidates.party = possible_candidacies.party
  AND candidates.constituency = possible_candidacies.constituency where candidates.name is null;
CREATE VIEW constituency_counts AS WITH candidate_counts AS
  (SELECT constituencies.seat_count AS seat_count,
          constituencies.constituency AS constituency,
          count(candidates.name) AS candidate_count,
          candidates.party AS party
   FROM constituencies
   JOIN candidates ON constituencies.constituency = candidates.constituency
   GROUP BY constituencies.constituency,
            candidates.party
   ORDER BY constituencies.constituency ASC)
SELECT constituency,
       seat_count,
       sum(candidate_count) AS candidate_count,
       count(candidate_count) AS party_count,
       printf("%.2f", sum(candidate_count)*1.0 / seat_count) AS competition
FROM candidate_counts
GROUP BY constituency
ORDER BY competition ASC;
CREATE VIEW parties as select party from candidates group by party order by party asc;
CREATE VIEW party_stats as with candidate_counts as (
  select
    party,
    count(name) as candidates
  from
    candidates
  group by
    party
  order by
    party asc
),
incumbent_candidate_counts as (
  select
    party,
    count(name) as incumbent_candidates
  from
    candidates
  where
    incumbent not null
  group by
    party
  order by
    party asc
),
constituency_counts as (
  select
    party,
    count(constituency) as constituencies
  from
    (select party, constituency from candidates group by party, constituency)
  group by
    party
  order by
    party asc
)
select
  candidate_counts.party,
  candidates,
  incumbent_candidates,
  printf("%.2f", 1.0*incumbent_candidates/candidates) as percent_incumbent,
  constituencies,
  printf("%.2f", constituencies/43.0) as constituency_coverage,
  printf("%.2f", 1.0*candidates/constituencies) as average_candidates_per_contested_constituency
from
  candidate_counts
  full join constituency_counts on candidate_counts.party = constituency_counts.party full join incumbent_candidate_counts on candidate_counts.party = incumbent_candidate_counts.party;
